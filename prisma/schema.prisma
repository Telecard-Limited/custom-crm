// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String ?  @unique
  emailVerified DateTime?
  password      String?
  image         String?
  country       String ?
  phoneNumber   String  ?   
  role          UserRoles @default(ADMIN)
  isActive      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts      Account[]
  workspaces     WorkSpace[] 
  company      Company[]
  department   Departments[] 
  emails        Email[]
  verificatoken VerificationToken[]
}


model WorkSpace{
    id 			String 		@id @default(auto()) @map("_id") @db.ObjectId
    userId      String  @db.ObjectId
    workspaceName String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Company{
    id 			String 		@id @default(auto()) @map("_id") @db.ObjectId
    companyName String
    companyEmail String    
    isCompanyEmail Boolean
    description String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [companyEmail], references: [email], onDelete: Cascade)     
   
}
model Departments{
id 			    String 		@id @default(auto()) @map("_id") @db.ObjectId
userId      String  @db.ObjectId
name        String
designation String

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Email{
id 			    String 		@id @default(auto()) @map("_id") @db.ObjectId
userId      String  @db.ObjectId
subject     String?
fromEmail   String?
fromName    String?
message     String?   
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String ?  @unique
  expires    DateTime?
  userId      String  @db.ObjectId
  @@unique([identifier, token])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum UserRoles{
    ADMIN
    SUPERADMIN
}